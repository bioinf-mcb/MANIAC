""" MANIAC

Tool for efficient comparison of DNA fragments optimized for phage genomes.

Version: 1.0.0
Authors: Jan Havranek, Wanangwa Ndovie, Janusz Koszucki, Jade Leconte, Rafal Mostowy

"""

# modules
import itertools
from pathlib import Path
from scripts.helpers import input_checkpoint, get_params
from scripts.helpers import display_settings, format_mmseqs_params

print('Running MANIAC!\n')

# default config file
configfile: "config.yml"

# paths
INPUT_FILE = config["INPUT_FILE"]
OUTPUT_DIR = config["OUTPUT_DIR"]
LOG_DIR = Path(OUTPUT_DIR, ".log")

# intermediate directoriescd .
INTERMEDIATE_FILES_DIR = Path(OUTPUT_DIR, "intermediate")
MMSEQS_DIR = Path(INTERMEDIATE_FILES_DIR, "mmseqs2")
MMSEQS_TEMP_DIR = Path(MMSEQS_DIR, "temp")

MODE, FAST, CDS_BASED, FRAGMENT_SIZE, SEPARATOR, DELETE_INTERMEDIATE_FILES, HOMOLOGS_IDENTITY, HOMOLOGS_COVERAGE, CONSERVED_IDENTITY, CONSERVED_COVERAGE, MMSEQS_PARAMS, MEMORY_GB, MMSEQS_THREADS = get_params(config, workflow.cores, workflow.basedir)

# input file checkpoint
SEPARATOR = input_checkpoint(INPUT_FILE, SEPARATOR, CDS_BASED)

# print settings to user
display_settings(MODE, INPUT_FILE, OUTPUT_DIR, LOG_DIR, INTERMEDIATE_FILES_DIR,
                 FRAGMENT_SIZE, CDS_BASED, SEPARATOR,
                 MMSEQS_THREADS, MEMORY_GB, MMSEQS_PARAMS, 
                 HOMOLOGS_IDENTITY, HOMOLOGS_COVERAGE,
                 CONSERVED_IDENTITY, CONSERVED_COVERAGE, 
                 FAST, DELETE_INTERMEDIATE_FILES)

### run MANIAC
rule target:
    input: Path(OUTPUT_DIR, "genome-alignment.csv")
           
           
rule split_genomes:
    input: Path(INPUT_FILE)
    output: Path(INTERMEDIATE_FILES_DIR, "split/INPUT_FILE")
    params: FRAGMENT_SIZE = FRAGMENT_SIZE
    script: "scripts/split_fasta.py"

rule make_query_db:
    input: Path(INTERMEDIATE_FILES_DIR, "split/INPUT_FILE")
    output: Path(MMSEQS_DIR, "query-db/query-db")
    log: Path(LOG_DIR, "mmseqs_query_createdb.log")
    shell: "mmseqs createdb {input} {output} > {log}.log 2>&1"

### fragment-based / CDS-based switch
rule make_db:
    input: Path(INPUT_FILE)
    output: Path(MMSEQS_DIR, "cds-db/cds-db") if CDS_BASED else \
			Path(MMSEQS_DIR, "reference-db/reference-db")
    log: Path(LOG_DIR, "mmseqs_reference_createdb.log")
    shell: "mmseqs createdb {input} {output} > {log} 2>&1"

rule get_total_cds_lengths:
    input: Path(INPUT_FILE)
    output: Path(INTERMEDIATE_FILES_DIR, "phage_lengths.csv")
    params: 
        SEPARATOR=SEPARATOR,
        CDS_BASED=CDS_BASED
    script: "scripts/get_fasta_lengths.py"

### ANI calculation (Gorie et al) - genome fragments against whole genome
rule mmseqs_qr_search:
    input:
        Path(MMSEQS_DIR, "query-db/query-db"),
        Path(MMSEQS_DIR, "reference-db/reference-db")
    output: Path(MMSEQS_DIR, "results-qr-db/results-qr-db.index")
    log: Path(LOG_DIR, "mmseqs_query_search.log")
    params:
        RESULTS_BASENAME = Path(MMSEQS_DIR, "results-qr-db/results-qr-db"),
        MMSEQS_TEMP_DIR = MMSEQS_TEMP_DIR,
        MMSEQS_PARAMS = MMSEQS_PARAMS
    threads: MMSEQS_THREADS
    shell:
        """
        mmseqs search {input} {params.RESULTS_BASENAME} {params.MMSEQS_TEMP_DIR} \
        --threads {threads} {params.MMSEQS_PARAMS} >> {log} 2>&1
        """

### CDS-based ANI calculation (BBH) [all-by-all CDS]
rule mmseqs_cds_search:
    input: Path(MMSEQS_DIR, "cds-db/cds-db")
    output: Path(MMSEQS_DIR, "results-cds-db/results-cds-db.index")
    log: Path(LOG_DIR, "mmseqs_cds_search.log")
    params:
        RESULTS_BASENAME = Path(MMSEQS_DIR, "results-cds-db/results-cds-db"),
        MMSEQS_TEMP_DIR = MMSEQS_TEMP_DIR,
        MMSEQS_PARAMS = MMSEQS_PARAMS
    threads: MMSEQS_THREADS
    shell:
        """
        mmseqs search {input} {input} {params.RESULTS_BASENAME} {params.MMSEQS_TEMP_DIR} \
        --threads {threads} {params.MMSEQS_PARAMS} > {log} 2>&1
        """

rule mmseqs_cds_convert:
    input:
        Path(MMSEQS_DIR, "cds-db/cds-db"),
        Path(MMSEQS_DIR, "results-cds-db/results-cds-db.index")
    output: Path(INTERMEDIATE_FILES_DIR, "1_search_results.tsv")
    log: Path(LOG_DIR, "mmseqs_cds_convert.log")
    params: RESULTS_BASENAME = Path(MMSEQS_DIR, "results-cds-db/results-cds-db")
    threads: MMSEQS_THREADS
    shell:
        """
        mmseqs convertalis {input[0]} {input[0]} \
        {params.RESULTS_BASENAME} {output} --threads {threads} \
        --format-output 'query,target,nident,alnlen,mismatch,pident,evalue,qlen'  > {log} 2>&1
        """

rule mmseqs_qr_convert:
    input:
        Path(MMSEQS_DIR, "query-db/query-db"),
        Path(MMSEQS_DIR, "reference-db/reference-db"),
        Path(MMSEQS_DIR, "results-qr-db/results-qr-db.index")
    output: Path(INTERMEDIATE_FILES_DIR, "1_search_results.tsv")
    log: Path(LOG_DIR, "mmseqs_qr_convert.log")
    params: RESULTS_BASENAME = Path(MMSEQS_DIR, "results-qr-db/results-qr-db")
    threads: MMSEQS_THREADS
    shell:
        """
        mmseqs convertalis {input[0]} {input[1]} \
        {params.RESULTS_BASENAME} {output} --threads {threads} \
        --format-output 'query,target,nident,alnlen,mismatch,pident,evalue,qlen'  > {log} 2>&1
        """

rule best_hits:
    input: Path(INTERMEDIATE_FILES_DIR, "1_search_results.tsv")
    output: Path(INTERMEDIATE_FILES_DIR, "2_significant_hits.tsv")
    log: Path(LOG_DIR, "best_hits.log")
    params:
        SORTPATH = Path(workflow.basedir, "scripts/sort.R"),
        SEPARATOR = SEPARATOR,
        CHUNK = Path(INTERMEDIATE_FILES_DIR, "chunk_"),
        MERGED = Path(INTERMEDIATE_FILES_DIR, "merged_chunks"),
        INTERMEDIATE_FILES_DIR = INTERMEDIATE_FILES_DIR,
        MMSEQS_THREADS = MMSEQS_THREADS,
        MEMORY_GB = MEMORY_GB,
        CHUNKSIZE = 30000000
    script: "scripts/best_hits.sh"

rule process_results:
    input: 
        Path(INTERMEDIATE_FILES_DIR, "2_significant_hits.tsv"),
        Path(INTERMEDIATE_FILES_DIR, "phage_lengths.csv")
    output: Path(OUTPUT_DIR, "genome-alignment.csv")
    log: Path(LOG_DIR, "process_results.log")
    params: COVERAGE = HOMOLOGS_COVERAGE,
            IDENTITY = HOMOLOGS_IDENTITY,
            MODE = MODE,
            CDS_BASED = CDS_BASED,
            SEPARATOR = SEPARATOR,
            CDS_ALIGNMENT_FILE = Path(OUTPUT_DIR, "cds-alignment.csv"),
            DELETE_INTERMEDIATE_FILES = DELETE_INTERMEDIATE_FILES,
            MMSEQS_TEMP_DIR = MMSEQS_TEMP_DIR,
            CONSERVED_IDENTITY = CONSERVED_IDENTITY,
            CONSERVED_COVERAGE = CONSERVED_COVERAGE,
    script: "scripts/process_results.R"
